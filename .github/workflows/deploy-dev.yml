name: Burger Express Dev Deployment
on:
  push:
    branches:
      - develop
jobs:
  frontend-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Build Frontend
        working-directory: frontend
        run: |
          npm install
          npm run build

      - name: Upload Frontend-Build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/*

  backend-build:
    runs-on: ubuntu-latest
    needs: frontend-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: develop

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Download Frontend-Build
        uses: actions/download-artifact@v4
        with:
          name: 'frontend-build'
          run-id: ${{ github.event.workflow_run.id }}
          path: 'backend/src/main/resources/static'

      - name: Build package
        run: mvn -f backend/pom.xml -B package

      - name: Upload Backend-Build
        uses: actions/upload-artifact@v4
        with:
          name: 'app-jar'
          path: 'backend/target/burger-express-app.jar'

  push-to-docker-hub:
    runs-on: ubuntu-latest
    needs: backend-build
    steps:
      - uses: actions/checkout@v4
        with:
          ref: develop

      - name: Download Backend Artefakt
        uses: actions/download-artifact@v4
        with:
          name: app-jar      # so hast du das Artefakt beim Build benannt
          run-id: ${{ github.event.workflow_run.id }}
          path: backend/target/

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: .                           # verweist auf dein Dockerfile
          push: true                          # damit das Image hochgeladen wird
          tags: ${{ secrets.DOCKER_IMAGE_TAG }}

  deploy-to-render:
    runs-on: ubuntu-latest
    needs: push-to-docker-hub

    steps:
      - name: Trigger Render Deployment
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}
